@using static Microsoft.AspNetCore.Components.Web.RenderMode
@rendermode InteractiveServer
@using SteamWebAuthenticator.Interfaces
@using SteamWebAuthenticator.Models
<div class="top-row navbar navbar-dark text-center">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Steam Authenticator</a>
    </div>
</div>
<div style="display: flex; flex-direction: column; align-items: center; margin-top: 20px; margin-right: 40px ">
    <label for="accountSelect" style="color: white; font-size: 2rem; font-weight: bold; text-align: center;">
        @(!string.IsNullOrEmpty(AccountService.SelectedAccount?.SteamGuardCode)
            ? AccountService.SelectedAccount.SteamGuardCode
            : "No Steam Guard Code Available")
    </label>
    <div class="progress" style="height: 20px; width: 150px; background-color: #e9ecef;">
        <div class="progress-bar progress-bar-striped progress-bar-animated bg-info"
             role="progressbar" aria-valuenow="75" aria-valuemin="0" aria-valuemax="100"
             style="width: @($"{ProgressPercentage}%");"></div>
    </div>
    <select id="accountSelect" @bind="AccountService.SelectedAccountName" class="form-select"
            style="margin-top: 15px; width: 150px; text-align: center;">
        <option value="">Select an account</option>
        @foreach (var account in _accounts)
        {
            <option value="@account.Username">@account.Username</option>
        }
    </select>
</div>




@implements IDisposable
@inject IAccountService AccountService;
@code {
    private bool _collapseNavMenu = true;

    private string? NavMenuCssClass => _collapseNavMenu ? "collapse" : null;
    private List<Account> _accounts = [];
    private int ProgressPercentage { get; set; }
    private CancellationTokenSource _cts = new();
    protected override Task OnInitializedAsync()
    {
        _cts = new CancellationTokenSource();
        _ = UpdateProgressBarPeriodically(_cts.Token);
        return Task.CompletedTask;
    }

    private async Task UpdateProgressBarPeriodically(CancellationToken token)
    {
        try
        {
            while (!token.IsCancellationRequested)
            {
                ProgressPercentage = await CalculateProgressAsync();
                InvokeAsync(StateHasChanged); // Ensure UI updates occur on the correct thread
                await Task.Delay(1000, token); // Delay with cancellation support
            }
        }
        catch (TaskCanceledException)
        {
            // Task was canceled, gracefully exit
        }
    }
    
    private async Task<int> CalculateProgressAsync()
    {
        long steamTime = await TimeAligner.GetSteamTimeAsync();
        long currentSteamChunk = steamTime / 30L;
        int secondsUntilChange = (int)(steamTime - (currentSteamChunk * 30L));
        if (AccountService.SelectedAccount != null)
        {
            AccountService.SelectedAccount.SteamGuardCode = await AccountService.SelectedAccount.GenerateSteamGuardCodeAsync();
        }

        return (int)(((30 - secondsUntilChange) / 30.0) * 100);
    }
    
    public void Dispose()
    {
        _cts.Cancel();
        _cts.Dispose();
    }
    
    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        AccountService.OnChange += StateHasChanged;
        _accounts = AccountService.GetAccountsList();
        if (_accounts.Count > 0)
        {
            AccountService.SelectedAccountName = _accounts[0].Username;
        }

        return Task.CompletedTask;
    }
    
    private void ToggleNavMenu()
    {
        _collapseNavMenu = !_collapseNavMenu;
    }
}