@using SteamAuth.Helpers
@using SteamWebAuthenticator.Helpers
@using SteamWebAuthenticator.Interfaces
@using SteamWebAuthenticator.Models
@using static Microsoft.AspNetCore.Components.Web.RenderMode
@using Constants = SteamWebAuthenticator.Constants
@rendermode InteractiveServer
@inject IAccountService AccountService
@if (IsVisible)
{
    <div class="modal" style="display: block;">
        <div class="modal-content">
            <div class="modal-header">
                <h5>@Title</h5>
            </div>
            <div class="modal-body">
                <p>@Message</p>
            </div>
            <div class="modal-footer text-center justify-content-center flex-column">
                <label class="btn btn-primary" for="input-file">
                    <i class="icons8-upload"></i> I already setup Steam Desktop Authenticator in another location on this PC and I want to import its account(s).
                </label>
                <InputFile OnChange="OnFilesSelected" id="input-file" multiple webkitdirectory hidden/>
                <button @onclick=Cancel class="btn btn-secondary">This is my first time and I just want to sign into my Steam Account(s).</button>
            </div>
        </div>
    </div>
}
@code {

    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public required string Title { get; set; }

    [Parameter]
    public required string Message { get; set; }

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    [Parameter]
    public EventCallback<bool> OnChange { get; set; }
    
    private async Task OnFilesSelected(InputFileChangeEventArgs e)
    {
        var accountFiles = e.GetMultipleFiles();
        if (accountFiles.Count == 0)
        {
            return;
        }

        var accounts = new List<Account>();
        foreach (var accountFile in accountFiles)
        {
            await using var accountFileStream = accountFile.OpenReadStream();
            using var reader = new StreamReader(accountFileStream);
            var accountContent = await reader.ReadToEndAsync();
            var account = await accountContent.FromJsonAsync<Account>();
            account = account.CreateOrLoad(account.Username + ".json");
            accounts.Add(account);
        }
        await AccountService.SetAccountsList(accounts);
        await OnChange.InvokeAsync(true);
        IsVisible = false;
        StateHasChanged();
    }
    
    private void Cancel()
    {
        IsVisible = false;
        OnClose.InvokeAsync(false);
    }
}