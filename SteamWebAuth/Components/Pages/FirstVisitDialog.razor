@using SteamAuth.Helpers
@using SteamWebAuthenticator
@using static Microsoft.AspNetCore.Components.Web.RenderMode
@rendermode InteractiveServer
@inject IJSRuntime Js
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@if (IsVisible)
{
    <div class="modal" style="display: block;">
        <div class="modal-content">
            <div class="modal-header">
                <h5>@Title</h5>
            </div>
            <div class="modal-body">
                <p>@Message</p>
            </div>
            <div class="modal-footer text-center justify-content-center">
                <label class="btn btn-primary" for="input-file">
                    <i class="icons8-upload"></i> I already setup Steam Desktop Authenticator in another location on this PC and I want to import its account(s).
                </label>
                <InputFile OnChange="OnFilesSelected" id="input-file" multiple webkitdirectory hidden/>
                <Alert @ref="alert"/>
                <button @onclick=Cancel class="btn btn-secondary">This is my first time and I just want to sign into my Steam Account(s).</button>
            </div>
        </div>
    </div>
}
@code {

    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public required string Title { get; set; }

    [Parameter]
    public required string Message { get; set; }

    [Parameter]
    public EventCallback<bool> OnClose { get; set; }

    private Alert alert = new Alert();

    private async Task OnFilesSelected(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles();
        if (files.Count == 0)
        {
            return;
        }

        var manifestFile = files.FirstOrDefault(file => file.Name == Constants.ManifestJson);


        var maFiles = files.Where(file => file.Name.EndsWith(".maFile", StringComparison.OrdinalIgnoreCase)).ToList();
        if (manifestFile == null || maFiles.Count == 0)
        {
            return;
        }

        await using (var stream = manifestFile.OpenReadStream())
        using (var reader = new StreamReader(stream))
        {
            var jsonContent = await reader.ReadToEndAsync();
            var encryptedJson = jsonContent.Encrypt();
            await LocalStorage.SetItemAsStringAsync(Constants.Manifest, encryptedJson);
        }

        foreach (var maFile in maFiles)
        {
            await using var stream = maFile.OpenReadStream();
            using var reader = new StreamReader(stream);
            var maFileContent = await reader.ReadToEndAsync();
            var encryptedMaFile = maFileContent.Encrypt();
            await LocalStorage.SetItemAsStringAsync(maFile.Name, encryptedMaFile);
        }

        alert.Show("Success", "All accounts and settings have been imported! Click OK to continue.");
        StateHasChanged();
        await OnClose.InvokeAsync(false);
        

    }
    
    private void Cancel()
    {
        IsVisible = false;
        OnClose.InvokeAsync(false);
    }
}